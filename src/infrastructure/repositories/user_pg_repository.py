from .postgres_repository import PostgresRepository
from ...domain.mappers.user_mapper import UserMapper
from ...domain.models.user import User
from ...domain.repositories.user_repository import UserRepository


class UserPGRepository(PostgresRepository, UserRepository):

    def exists(self, user_id: str) -> bool:
        result = self._execute_query(f"SELECT COUNT(user_id) AS count FROM Users WHERE user_id = '{user_id}'")
        return result.first()['count'] > 0

    def get(self, user_id: int):
        result = self._execute_query(f"SELECT * FROM Users WHERE user_id = '{user_id}'")
        return result.map_first(UserMapper)

    def create(self, user: User) -> None:
        self._execute_query(f"INSERT INTO Users (user_id, username, email, hashed_password) VALUES "
                            f"('{user.id}', '{user.username}', '{user.email}', '{user.hashed_password}')")

    """
    def email_exists(self, email: str) -> bool:
        return self.get_by_email(email.lower()) is not None

    def get_by_email(self, email: str) -> User:
        res = self._execute_query(f"SELECT * FROM Users WHERE email = '{email}'")
        return res.map_first(User)

    def get_by_id(self, user_id: int, get_avatar=False) -> User:
        res = self._execute_query(f"SELECT * FROM Users WHERE user_id = '{user_id}'")
        model = res.map_first(User)
        if get_avatar:
            model.avatar = self.get_user_avatar(model.email)
        return model

    # Esto tiene que ir en otro repository
    def get_user_avatar(self, email: str) -> str:
        response = requests.get(config.GRAVATAR_AUTOGENERATED_AVATAR_URL.format(
            hashlib.md5(email.lower().encode('utf-8')).hexdigest()))
        return ImageEncoder.to_base_64_str(response.content)

    def insert(self, model: User):
        self._execute_query(f"INSERT INTO Users (username, email, hashed_password) VALUES ('{model.username}', "
                            f"'{model.email}', '{model.hashed_password}')")

    def get(self, user_id: int):
        res = self._execute_query(f"SELECT * FROM Users WHERE user_id = {user_id}")
        return res.map_first(User)

    def update_password(self, user_id: int, hashed_pass: str) -> bool:
        res = self._execute_query(f"UPDATE Users SET hashed_password = '{hashed_pass}' WHERE user_id = {user_id}")
        return res.rows_affected == 1
    """
